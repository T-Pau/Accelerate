.byte_order: 12345678

.argument_types:

bc_or_de: {
    bc: 0
    de: 1
}

basic_condition: {
    nz: 0
    z: 1
    nc: 2
    c: 3
}

bit_number: ; TODO 0-7

condition: {
    nz: 0
    z: 1
    nc: 2
    c: 3
    po: 4
    pe: 5
    p: 6
    m: 7
}

index_register: {
    ix: 0
    iy: 1
}

interrupt_mode: {
    0: 0
    1: 2
    2: 3
}

i_or_r: {
    i: 0
    r: 1
}

register: {
    a: 7
    b: 0
    c: 1
    d: 2
    e: 3
    h: 4
    l: 5
}

restart_address: ; TODO: $00-$38, divisible by 8

register_pair_af: {
    bc: 0
    de: 1
    hl: 2
    af: 3
}

register_pair_ix: {
    bc: 0
    de: 01
    ix: 10
    sp: 11
}

register_pair_iy: {
    bc: 0
    de: 01
    iy: 10
    sp: 11
}

register_pair_sp: {
    bc: 0
    de: 1
    hl: 2
    sp: 3
}


.addressing_modes:

a__immediate: {
    notation: a,n
    arguments: {
        n: byte
    }
    encoding: opcode, n
}

a__indexed: {
    notation: a,(i+d)
    arguments: {
        i: index_register
        d: signed_byte
    }
    encoding: opcode | i << 13, d
}

a__indirect: {
    notation: a,(nn)
    arguments: {
        nn: word
    }
    encoding: opcode, nn
}

a__indirect_bc_or_de: {
    notation: a,(rr)
    arguments: {
        rr: bc_or_de
    }
    encoding: opcode | rr << 4
}

a__indirect_de: {
    notation: a,(de)
}

a__indirect_hl: {
    notation: a,(hl)
}

a__i_or_r: {
    notation: a,r
    arguments: {
        r: i_or_r
    }
    encoding: opcode | r << 3
}

a__register: {
    notation: a,r
    arguments: {
        r: register
    }
    encoding: opcode | r
}

address: {
    notation nn
    arguments: {
       nn: word
    }
    encoding: opcode, nn
}

af__af_prime: {
    notation af,af ; TODO: af,af'
    encoding: opcode
}

basic_condition__relative: {
    notation: cc, nn
    arguments: {
        cc: basic_condition
        nn: word ; TODO: has to be close enough to instruction_address
    }
    encoding: opcode | cc << 3, address - instruction_address - 2
}

bit_number__indexed: {
    notation: b,(i+d)
    arguments: {
        b: bit_number
        i: index_register
        d: signed_byte
    }
    encoding: opcode | i << 29 | d << 8 | b << 3
}

bit_number__indirect_hl: {
    notation: b,(hl)
    arguments: {
        b: bit_number
    }
    encoding: opcode | b << 3
}

bit_number__register: {
    notation: b, r
    arguments: {
        b: bit_number
        r: register
    }
    encoding: opcode | b << 3 | r
}

condition__address: {
    notation: cc
    arguments: {
        cc: condition
    }
    encoding: opcode | cc << 3
}

condition__address: {
    notation: cc, nn
    arguments: {
        cc: condition
        nn: word
    }
    encoding: opcode | cc << 3, nn
}

de__hl: {
    notation: de,hl
}

hl__indirect: {
    notation: hl,(nn)
    arguments: {
        nn: word
    }
    encoding: opcode, nn
}

hl__register_pair_sp: {
    notation: (hl),dd
    arguments: {
        dd: register_pair_sp
    }
    encoding: opcode | dd << 4
}

implied: {
    notation:
}

indexed: {
    notation: (i+d)
    arguments: {
        i: index_register
        d: signed_byte
    }
    encoding: opcode | i << 13, d
}

indexed_extended: {
    notation: (i+d)
    arguments: {
        i: index_register
        d: signed_byte
    }
    encoding: opcode | i << 29 | d << 8
}

indexed__immediate: {
    notation: (i+d),n
    arguments: {
        i: index_register
        d: signed_byte
        n: byte
    }
    encoding: opcode | i << 13, d, n
}

indexed__register: {
    notation: (i+d),r
    arguments: {
        i: index_register
        d: signed_byte
        r: register
    }
    encoding: opcode | i << 13 | r << 3, d ; TODO: check if this is correct
}

index_register: {
    notation: i
    arguments: {
        i: index_register
    }
    encoding: opcode | i << 13
}

index_register__immediate: {
    notation: i,nn
    arguments: {
        i: index_register
        nn: word
    }
    encoding: opcode | i << 13, word
}

index_register__indirect: {
    notation: i,(nn)
    arguments: {
        i: index_register
        nn: word
    }
    encoding: opcode | i << 13, word
}

indirect__a: {
    notation: (nn),a
    arguments: {
        nn: word
    }
    encoding: opcode, nn
}

indirect__a_bc_or_de: {
    notation: (rr),a
    arguments: {
        rr: bc_or_de
    }
    encoding: opcode | rr << 4
}

indirect__hl: {
    notation: (nn),hl
    arguments: {
        nn: word
    }
    encoding: opcode, nn
}

indirect__index_register: {
    notation: (nn),i
    arguments: {
        nn: word
        i: index_register
    }
    encoding: opcode | i << 13, nn
}

indirect__register_pair_sp: {
    notation: (nn),dd
    arguments: {
        dd: register_pair_sp
        nn: word
    }
    encoding: opcode | dd << 4, nn
}

indirect_hl: {
    notation: (hl)
}

indirect_hl__immediate: {
    notation: (hl),n
    arguments: {
        n: byte
    }
    encoding: opcode, n
}

indirect_hl__register: {
    notation: (hl),r
    arguments: {
        r: register
    }
    encoding: opcode | r
}

indirect_index: {
    notation: i
    arguments: {
        i: index_register
    }
    encoding: opcode | i << 13
}

indirect_sp__hl: {
    notation: (sp),hl
}

indirect_sp__index_register: {
    notation: (sp),i
    arguments: {
        i: index_register
    }
    encoding: opcode | i << 13
}

interrupt_mode: {
    notation: m
    arguments: {
        m: interrupt_mode
    }
    encoding: opcode | m << 3
}

i_or_r__a: {
    notation: r,a
    arguments: {
        r: i_or_r
    }
    encoding: opcode | r << 3
}

ix__register_pair_ix: {
    notation: ix, pp
    arguments: {
        pp: register_pair_ix
    }
    encoding: opcode | pp < 4
}

iy__register_pair_iy: {
    notation: iy, pp
    arguments: {
        pp: register_pair_iy
    }
    encoding: opcode | pp < 4
}

register__immediate: {
    notation: r,n
    arguments: {
        r: register
        n: byte
    }
    encoding: opcode | r << 3
}

register__indexed: {
    notation: r,(i+d)
    arguments: {
        r: register
        i: index_register
        d: signed_byte
    }
    encoding: opcode | i << 13 | r << 3, d
}

register__indirect_c: {
    notation: r, (c)
    arguments: {
        r: register
    }
    encoding: opcode | r << 3
}

register__indirect_hl: {
    notation: r,(hl)
    arguments: {
        r: register
    }
    encoding: opcode | r << 3
}

register_low: {
    notation: r
    arguments: {
        r: register
    }
    encoding: opcode | r
}
register_high: {
    notation: r
    arguments: {
        r: register
    }
    encoding: opcode | r << 3
}

register__register: {
    notation: r1,r2
    arguments: {
        r1: register
        r2: register
    }
    encoding: opcode | r1 << 3 | r2
}

register_pair_af: {
    notation: rr
    arguments: {
        rr: register_pair_af
    }
    encoding: opcode | rr << 4
}

register_pair_sp: {
    notation: ss
    arguments: {
        ss: register_pair_sp
    }
    encoding: opcode | ss << 4
}

register_pair_sp__immediate: {
    notation: dd, nn
    arguments: {
        dd: register_pair_sp
        nn: word
    }
    encoding: opcode | dd << 4, nn
}

register_pair_sp__indirect: {
    notation: dd,(nn)
    arguments: {
        dd: register_pari
        nn: word
    }
    encoding: opcode | dd << 4, nn
}

relative: {
    notation: address
    arguments: {
        address: word ; TODO: has to be close enough to instruction_address
    }
    encoding: opcode, address - instruction_address - 2
}

restart_address: {
    notation: p
    arguments: {
        p: restart_address
    }
    encoding: opcode | (p / 8) << 3
}

sp__hl: {
    notation: sp,hl
}

sp__index_register: {
    notation: sp,i
    arguments: { 
        i: index_register
    }
    encoding: opcode | i << 13
}


.instructions:

adc: {
    a__immediate: $ce
    a__indexed: $dd8e
    a__indirect_hl: $8e
    a__register: $88
    hl__register_pair_sp: $ed4a
}

add: {
    a__immediate: $c6
    a__indexed: $dd86
    a__indirect_hl: $86
    a__register: $80
    ix__register_pair_ix: $dd09
    iy__register_pair_iy: $fd09
    hl__register_pair_sp: $09
}

and: {
    a__immediate: $e6
    a__indexed: $dda6
    a__indirect_hl: $a6
    a__register: $a0
}

bit: {
    bit_number__indexed: $ddcb0046
    bit_number__indirect: $cb46
    bit_number__register: $cb40
}

call: {
    address: $cd
    condition__address: $c4
}

ccf: {
    implied: $3f
}

cp: {
    a__immediate: $fe
    a__indexed: $ddbe
    a__indirect_hl: $be
    a__register: $b8
}

cpd: {
    implied: $eda9
}

cpdr: {
    implied: $edb9
}

cpi: {
    implied: $eda1
}

cpir: {
    implied: $edb1
}

cpl: {
    implied: $2f
}

daa: {
    implied: $27
}

dec: {
    indexed: $dd35
    index_register: $dd2b
    indirect_hl: $35
    register_high: $05
    register_pair_sp: $0b
}

di: {
    implied: $f3
}

djnz: {
    relative: $10
}

ei: {
    implied: $fb
}

ex: {
    af__af_prime: $08
    de__hl: $eb
    indirect_sp__hl: $e3
    indirect_sp__index_register: $dde3
}

exx: {
    implied: $d9
}

halt: {
    implied: $76
}

im: {
    inerrupt_mode: $ed46
}

in: {
    a__indirect: $db
    register__indirect_c: $ed40
}

inc: {
    indexed: $dd34
    index_register: $dd23
    indirect_hl: $34
    register_high: $04
    register_pair_sp: $03
}

ind: {
    implied: $edaa
}

indr: {
    implied: $edba
}

ini: {
    implied: $eda2
}

inir: {
    implied: $edb2
}

jp: {
    address: $c3
    condition__address: $42
    basic_condition__relative: $20
    indirect_hl: $e9
    indirect_index: $dde9
}

jr: {
    relative: $18
}

ld: {
    indirect__a_bc_or_de: $02
    i_or_r__a: $ed47
    indirect__hl: $22
    sp__hl: $f9
    indexed__immediate: $dd36
    index_register__immediate: $dd21
    indirect_hl__immediate: $36
    register__immediate: $06
    register_pair_sp__immediate: $01
    register__indexed: $dd46
    indirect__index_register: $dd22
    sp__index_register: $ddf9
    a__indirect_bc_or_de: $0a
    register__indirect_hl: $46
    a__indirect: $3a
    hl__indirect: $2a
    index_register__indirect: $dd2a
    register_pair_sp__indirect: $ed4b
    a__i_or_r: $ed57
    indirect__register_pair_sp: $ed43
    indexed__register: $dd70
    indirect_hl__register: $70
    register__register: $40
}

ldd: {
    implied: $eda8
}

lddr: {
    implied: $edb8
}

ldi: {
    implied: $eda0
}

ldir: {
    implied: $edb0
}

neg: {
    implied: $ed44
}

nop: {
    implied: $00
}

or: {
    a__immediate: $f6
    a__indexed: $ddb6
    a__indirect_hl: $b6
    a__register: $b0
}

out: {
    a__indirect: $d3
    register__indirect_c: $ed41
}

outd: {
    implied: $edab
}

outdr: {
    implied: $edbb
}

outi: {
    implied: $eda3
}

outir: {
    implied: $edb3
}

pop: {
    index_register: $dde1
    register_pair_af: $c1
}

push: {
    index_register: $dde5
    register_pair_af: $c5
}

res: {
    bit_number__indexed: $ddcb0086
    bit_number__indirect: $cb86
    bit_number__register: $cb80
}

ret: {
    implied: $c9
    condition: $c0
}

reti: {
    implied: $ed4d
}

retn: {
    implied: $ed45
}

rl: {
    register_low: $cb10
    indexed_extended: $ddcb0016
    indirect_hl: $cb16
}

rla: {
    implied: $17
}

rlc: {
    register_low: $cb00
    indexed_extended: $ddcb0016
    indirect_hl: $cb06
}

rlca: {
    implied: $07
}

rld: {
    implied: $ed6f
}

rr: {
    register_low: $cb18 ; TODO: user manual has it as $cb08, which is rrc
    indexed_extended: $ddcb001e
    indirect_hl: $cb1e
}

rra: {
    implied: $1f
}

rrc: {
    register_low: $cb08
    indexed_extended: $ddcb000e
    indirect_hl: $cb0e
}

rrca: {
    implied: $0f
}

rrd: {
    implied: $ed67
}

rst: {
    restart_address: $c3
}

sbc: {
    a__immediate: $de
    a__indexed: $dd9e
    a__indirect_hl: $9e
    a__register: $98
    hl__register_pair_sp: $ed42
}

scf: {
    implied: $37
}

set: {
    bit_number__indexed: $ddcb00c6
    bit_number__indirect: $cbc6
    bit_number__register: $cbc0
}

sla: {
    register_low: $cb20
    indexed_extended: $ddcb0026
    indirect_hl: $cb26
}

sra: {
    register_low: $cb28
    indexed_extended: $ddcb002e
    indirect_hl: $cb2e
}

srl: {
    register_low: $cb38
    indexed_extended: $ddcb003e
    indirect_hl: $cb3e
}

sub: {
    a__immediate: $d6
    a__indexed: $dd96
    a__indirect_hl: $96
    a__register: $90
}

xor: {
    a__immediate: $ee
    a__indexed: $ddae
    a__indirect_hl: $ae
    a__register: $a8
}
