; z80.cpu -- CPU definition for Zilog Z80
;
; Copyright (C) Dieter Baron
;
; The authors can be contacted at <accelerate@tpau.group>
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions
; are met:
;
; 1. Redistributions of source code must retain the above copyright
;    notice, this list of conditions and the following disclaimer.
;
; 2. The names of the authors may not be used to endorse or promote
;   products derived from this software without specific prior
;   written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS
; OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
; IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
; IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.byte_order 12345678

.syntax keywords: "af'"

.argument_type byte range: 0, $ff

.argument_type word range: 0, $ffff

.argument_type bc_or_de enum {
    bc: 0
    de: 1
}

.argument_type basic_condition enum {
    nz: 0
    z: 1
    nc: 2
    c: 3
}

.argument_type bit_number range: 0, 7

.argument_type condition enum {
    nz: 0
    z: 1
    nc: 2
    c: 3
    po: 4
    pe: 5
    p: 6
    m: 7
}

.argument_type index_register enum {
    ix: 0
    iy: 1
}

.argument_type interrupt_mode map {
    0: 0
    1: 2
    2: 3
}

.argument_type i_or_r enum {
    i: 0
    r: 1
}

.argument_type register enum {
    a: 7
    b: 0
    c: 1
    d: 2
    e: 3
    h: 4
    l: 5
}

.argument_type restart_address map {
    $00: 0
    $08: 1
    $10: 2
    $18: 3
    $20: 4
    $28: 5
    $30: 6
    $38: 7
}

.argument_type register_pair_af enum {
    bc: 0
    de: 1
    hl: 2
    af: 3
}

.argument_type register_pair_ix enum {
    bc: 0
    de: 01
    ix: 10
    sp: 11
}

.argument_type register_pair_iy enum {
    bc: 0
    de: 01
    iy: 10
    sp: 11
}

.argument_type register_pair_sp enum {
    bc: 0
    de: 1
    hl: 2
    sp: 3
}

.argument_type signed_byte range: -128, 127


.addressing_mode a__immediate {
    notation: a,n
    arguments {
        n: byte
    }
    encoding: .opcode, n
}

.addressing_mode a__indexed {
    notation: a,(i+d)
    arguments {
        i: index_register
        d: signed_byte
    }
    encoding: .opcode | i << 13, d
}

.addressing_mode a__indirect {
    notation: a,(nn)
    arguments {
        nn: word
    }
    encoding: .opcode, nn
}

.addressing_mode a__indirect_bc_or_de {
    notation: a,(rr)
    arguments {
        rr: bc_or_de
    }
    encoding: .opcode | rr << 4
}

.addressing_mode a__indirect_de {
    notation: a,(de)
}

.addressing_mode a__indirect_hl {
    notation: a,(hl)
}

.addressing_mode a__i_or_r {
    notation: a,r
    arguments {
        r: i_or_r
    }
    encoding: .opcode | r << 3
}

.addressing_mode a__register {
    notation: a,r
    arguments {
        r: register
    }
    encoding: .opcode | r
}

.addressing_mode address {
    notation: nn
    arguments {
       nn: word
    }
    encoding: .opcode, nn
}

.addressing_mode af__af_prime {
    notation: af,af'
    encoding: .opcode
}

.addressing_mode basic_condition__relative {
    notation: cc, nn
    arguments {
        cc: basic_condition
        nn: word
    }
    encoding: .opcode | cc << 3, address - .pc - 2 ; : 1
}

.addressing_mode bit_number__indexed {
    notation: b,(i+d)
    arguments {
        b: bit_number
        i: index_register
        d: signed_byte
    }
    encoding: .opcode | i << 29 | d << 8 | b << 3
}

.addressing_mode bit_number__indirect_hl {
    notation: b,(hl)
    arguments {
        b: bit_number
    }
    encoding: .opcode | b << 3
}

.addressing_mode bit_number__register {
    notation: b, r
    arguments {
        b: bit_number
        r: register
    }
    encoding: .opcode | b << 3 | r
}

.addressing_mode condition {
    notation: cc
    arguments {
        cc: condition
    }
    encoding: .opcode | cc << 3
}

.addressing_mode condition__address {
    notation: cc, nn
    arguments {
        cc: condition
        nn: word
    }
    encoding: .opcode | cc << 3, nn
}

.addressing_mode de__hl {
    notation: de,hl
}

.addressing_mode hl__indirect {
    notation: hl,(nn)
    arguments {
        nn: word
    }
    encoding: .opcode, nn
}

.addressing_mode hl__register_pair_sp {
    notation: (hl),dd
    arguments {
        dd: register_pair_sp
    }
    encoding: .opcode | dd << 4
}

.addressing_mode implied {
    notation:
}

.addressing_mode indexed {
    notation: (i+d)
    arguments {
        i: index_register
        d: signed_byte
    }
    encoding: .opcode | i << 13, d
}

.addressing_mode indexed_extended {
    notation: (i+d)
    arguments {
        i: index_register
        d: signed_byte
    }
    encoding: .opcode | i << 29 | d << 8
}

.addressing_mode indexed__immediate {
    notation: (i+d),n
    arguments {
        i: index_register
        d: signed_byte
        n: byte
    }
    encoding: .opcode | i << 13, d, n
}

.addressing_mode indexed__register {
    notation: (i+d),r
    arguments {
        i: index_register
        d: signed_byte
        r: register
    }
    encoding: .opcode | i << 13 | r << 3, d ; TODO: check if this is correct
}

.addressing_mode index_register {
    notation: i
    arguments {
        i: index_register
    }
    encoding: .opcode | i << 13
}

.addressing_mode index_register__immediate {
    notation: i,nn
    arguments {
        i: index_register
        nn: word
    }
    encoding: .opcode | i << 13, word
}

.addressing_mode index_register__indirect {
    notation: i,(nn)
    arguments {
        i: index_register
        nn: word
    }
    encoding: .opcode | i << 13, word
}

.addressing_mode indirect__a {
    notation: (nn),a
    arguments {
        nn: word
    }
    encoding: .opcode, nn
}

.addressing_mode indirect__a_bc_or_de {
    notation: (rr),a
    arguments {
        rr: bc_or_de
    }
    encoding: .opcode | rr << 4
}

.addressing_mode indirect__hl {
    notation: (nn),hl
    arguments {
        nn: word
    }
    encoding: .opcode, nn
}

.addressing_mode indirect__index_register {
    notation: (nn),i
    arguments {
        nn: word
        i: index_register
    }
    encoding: .opcode | i << 13, nn
}

.addressing_mode indirect__register_pair_sp {
    notation: (nn),dd
    arguments {
        dd: register_pair_sp
        nn: word
    }
    encoding: .opcode | dd << 4, nn
}

.addressing_mode indirect_hl {
    notation: (hl)
}

.addressing_mode indirect_hl__immediate {
    notation: (hl),n
    arguments {
        n: byte
    }
    encoding: .opcode, n
}

.addressing_mode indirect_hl__register {
    notation: (hl),r
    arguments {
        r: register
    }
    encoding: .opcode | r
}

.addressing_mode indirect_index {
    notation: i
    arguments {
        i: index_register
    }
    encoding: .opcode | i << 13
}

.addressing_mode indirect_sp__hl {
    notation: (sp),hl
}

.addressing_mode indirect_sp__index_register {
    notation: (sp),i
    arguments {
        i: index_register
    }
    encoding: .opcode | i << 13
}

.addressing_mode interrupt_mode {
    notation: m
    arguments {
        m: interrupt_mode
    }
    encoding: .opcode | m << 3
}

.addressing_mode i_or_r__a {
    notation: r,a
    arguments {
        r: i_or_r
    }
    encoding: .opcode | r << 3
}

.addressing_mode ix__register_pair_ix {
    notation: ix, pp
    arguments {
        pp: register_pair_ix
    }
    encoding: .opcode | pp << 4
}

.addressing_mode iy__register_pair_iy {
    notation: iy, pp
    arguments {
        pp: register_pair_iy
    }
    encoding: .opcode | pp << 4
}

.addressing_mode register__immediate {
    notation: r,n
    arguments {
        r: register
        n: byte
    }
    encoding: .opcode | r << 3
}

.addressing_mode register__indexed {
    notation: r,(i+d)
    arguments {
        r: register
        i: index_register
        d: signed_byte
    }
    encoding: .opcode | i << 13 | r << 3, d
}

.addressing_mode register__indirect_c {
    notation: r, (c)
    arguments {
        r: register
    }
    encoding: .opcode | r << 3
}

.addressing_mode register__indirect_hl {
    notation: r,(hl)
    arguments {
        r: register
    }
    encoding: .opcode | r << 3
}

.addressing_mode register_low {
    notation: r
    arguments {
        r: register
    }
    encoding: .opcode | r
}
.addressing_mode register_high {
    notation: r
    arguments {
        r: register
    }
    encoding: .opcode | r << 3
}

.addressing_mode register__register {
    notation: r1,r2
    arguments {
        r1: register
        r2: register
    }
    encoding: .opcode | r1 << 3 | r2
}

.addressing_mode register_pair_af {
    notation: rr
    arguments {
        rr: register_pair_af
    }
    encoding: .opcode | rr << 4
}

.addressing_mode register_pair_sp {
    notation: ss
    arguments {
        ss: register_pair_sp
    }
    encoding: .opcode | ss << 4
}

.addressing_mode register_pair_sp__immediate {
    notation: dd, nn
    arguments {
        dd: register_pair_sp
        nn: word
    }
    encoding: .opcode | dd << 4, nn
}

.addressing_mode register_pair_sp__indirect {
    notation: dd,(nn)
    arguments {
        dd: register_pair_sp
        nn: word
    }
    encoding: .opcode | dd << 4, nn
}

.addressing_mode relative {
    notation: address
    arguments {
        address: word ; TODO: has to be close enough to .pc
    }
    encoding: .opcode, address - .pc - 2 :1
}

.addressing_mode restart_address {
    notation: p
    arguments {
        p: restart_address
    }
    encoding: .opcode | (p / 8) << 3
}

.addressing_mode sp__hl {
    notation: sp,hl
}

.addressing_mode sp__index_register {
    notation: sp,i
    arguments { 
        i: index_register
    }
    encoding: .opcode | i << 13
}


.instruction adc {
    a__immediate: $ce
    a__indexed: $dd8e
    a__indirect_hl: $8e
    a__register: $88
    hl__register_pair_sp: $ed4a
}

.instruction add {
    a__immediate: $c6
    a__indexed: $dd86
    a__indirect_hl: $86
    a__register: $80
    ix__register_pair_ix: $dd09
    iy__register_pair_iy: $fd09
    hl__register_pair_sp: $09
}

.instruction and {
    a__immediate: $e6
    a__indexed: $dda6
    a__indirect_hl: $a6
    a__register: $a0
}

.instruction bit {
    bit_number__indexed: $ddcb0046
    bit_number__indirect: $cb46
    bit_number__register: $cb40
}

.instruction call {
    address: $cd
    condition__address: $c4
}

.instruction ccf {
    implied: $3f
}

.instruction cp {
    a__immediate: $fe
    a__indexed: $ddbe
    a__indirect_hl: $be
    a__register: $b8
}

.instruction cpd {
    implied: $eda9
}

.instruction cpdr {
    implied: $edb9
}

.instruction cpi {
    implied: $eda1
}

.instruction cpir {
    implied: $edb1
}

.instruction cpl {
    implied: $2f
}

.instruction daa {
    implied: $27
}

.instruction dec {
    indexed: $dd35
    index_register: $dd2b
    indirect_hl: $35
    register_high: $05
    register_pair_sp: $0b
}

.instruction di {
    implied: $f3
}

.instruction djnz {
    relative: $10
}

.instruction ei {
    implied: $fb
}

.instruction ex {
    af__af_prime: $08
    de__hl: $eb
    indirect_sp__hl: $e3
    indirect_sp__index_register: $dde3
}

.instruction exx {
    implied: $d9
}

.instruction halt {
    implied: $76
}

.instruction im {
    inerrupt_mode: $ed46
}

.instruction in {
    a__indirect: $db
    register__indirect_c: $ed40
}

.instruction inc {
    indexed: $dd34
    index_register: $dd23
    indirect_hl: $34
    register_high: $04
    register_pair_sp: $03
}

.instruction ind {
    implied: $edaa
}

.instruction indr {
    implied: $edba
}

.instruction ini {
    implied: $eda2
}

.instruction inir {
    implied: $edb2
}

.instruction jp {
    address: $c3
    condition__address: $42
    basic_condition__relative: $20
    indirect_hl: $e9
    indirect_index: $dde9
}

.instruction jr {
    relative: $18
}

.instruction ld {
    indirect__a_bc_or_de: $02
    i_or_r__a: $ed47
    indirect__hl: $22
    sp__hl: $f9
    indexed__immediate: $dd36
    index_register__immediate: $dd21
    indirect_hl__immediate: $36
    register__immediate: $06
    register_pair_sp__immediate: $01
    register__indexed: $dd46
    indirect__index_register: $dd22
    sp__index_register: $ddf9
    a__indirect_bc_or_de: $0a
    register__indirect_hl: $46
    a__indirect: $3a
    hl__indirect: $2a
    index_register__indirect: $dd2a
    register_pair_sp__indirect: $ed4b
    a__i_or_r: $ed57
    indirect__register_pair_sp: $ed43
    indexed__register: $dd70
    indirect_hl__register: $70
    register__register: $40
}

.instruction ldd {
    implied: $eda8
}

.instruction lddr {
    implied: $edb8
}

.instruction ldi {
    implied: $eda0
}

.instruction ldir {
    implied: $edb0
}

.instruction neg {
    implied: $ed44
}

.instruction nop {
    implied: $00
}

.instruction or {
    a__immediate: $f6
    a__indexed: $ddb6
    a__indirect_hl: $b6
    a__register: $b0
}

.instruction out {
    a__indirect: $d3
    register__indirect_c: $ed41
}

.instruction outd {
    implied: $edab
}

.instruction outdr {
    implied: $edbb
}

.instruction outi {
    implied: $eda3
}

.instruction outir {
    implied: $edb3
}

.instruction pop {
    index_register: $dde1
    register_pair_af: $c1
}

.instruction push {
    index_register: $dde5
    register_pair_af: $c5
}

.instruction res {
    bit_number__indexed: $ddcb0086
    bit_number__indirect: $cb86
    bit_number__register: $cb80
}

.instruction ret {
    implied: $c9
    condition: $c0
}

.instruction reti {
    implied: $ed4d
}

.instruction retn {
    implied: $ed45
}

.instruction rl {
    register_low: $cb10
    indexed_extended: $ddcb0016
    indirect_hl: $cb16
}

.instruction rla {
    implied: $17
}

.instruction rlc {
    register_low: $cb00
    indexed_extended: $ddcb0016
    indirect_hl: $cb06
}

.instruction rlca {
    implied: $07
}

.instruction rld {
    implied: $ed6f
}

.instruction rr {
    register_low: $cb18 ; TODO: user manual has it as $cb08, which is rrc
    indexed_extended: $ddcb001e
    indirect_hl: $cb1e
}

.instruction rra {
    implied: $1f
}

.instruction rrc {
    register_low: $cb08
    indexed_extended: $ddcb000e
    indirect_hl: $cb0e
}

.instruction rrca {
    implied: $0f
}

.instruction rrd {
    implied: $ed67
}

.instruction rst {
    restart_address: $c3
}

.instruction sbc {
    a__immediate: $de
    a__indexed: $dd9e
    a__indirect_hl: $9e
    a__register: $98
    hl__register_pair_sp: $ed42
}

.instruction scf {
    implied: $37
}

.instruction set {
    bit_number__indexed: $ddcb00c6
    bit_number__indirect: $cbc6
    bit_number__register: $cbc0
}

.instruction sla {
    register_low: $cb20
    indexed_extended: $ddcb0026
    indirect_hl: $cb26
}

.instruction sra {
    register_low: $cb28
    indexed_extended: $ddcb002e
    indirect_hl: $cb2e
}

.instruction srl {
    register_low: $cb38
    indexed_extended: $ddcb003e
    indirect_hl: $cb3e
}

.instruction sub {
    a__immediate: $d6
    a__indexed: $dd96
    a__indirect_hl: $96
    a__register: $90
}

.instruction xor {
    a__immediate: $ee
    a__indexed: $ddae
    a__indirect_hl: $ae
    a__register: $a8
}
